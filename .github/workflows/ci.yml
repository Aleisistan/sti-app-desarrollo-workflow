name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test-backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: secret123!
          POSTGRES_DB: sticct_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres -d sticct_test" --health-interval 10s --health-timeout 5s --health-retries 5
    env:
      NODE_ENV: test
      DB_HOST: localhost
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: secret123!
      DB_DATABASE: sticct_test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit (report only)
        run: npm audit --audit-level high || true
        
      - name: Try to fix non-breaking vulnerabilities
        run: npm audit fix --audit-level high || true
        continue-on-error: true
        
      - name: Security vulnerability summary
        run: |
          echo "=== Security Audit Summary ==="
          npm audit --audit-level moderate || echo "Vulnerabilities found - check logs above"
        continue-on-error: true
        
      - name: Run lint
        run: npm run lint
        
      - name: Run e2e tests
        run: npm run test:e2e

      - name: Run unit tests with coverage
        run: npm run test:cov

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: 'backend/coverage/lcov.info'
          flags: backend
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

  docker-build-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Test Backend Docker build
        run: |
          cd backend
          docker build -t test-backend .
          docker run --rm test-backend node --version

      - name: Test Frontend Docker build
        run: |
          cd frontend
          docker build -t test-frontend .
          
  test-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          if ! npm ci; then
            echo "npm ci failed, trying npm install to sync lock file"
            npm install
          fi

      - name: Security audit for frontend
        run: npm audit --audit-level moderate || echo "Frontend vulnerabilities found"
        continue-on-error: true

      - name: Run lint
        run: npm run lint
        continue-on-error: true

      - name: Run unit tests with coverage
        run: npm run test:cov
        env:
          CI: true
          CHROME_BIN: /usr/bin/google-chrome

      - name: Build application
        run: npm run build

      - name: Upload frontend coverage
        uses: codecov/codecov-action@v4
        with:
          files: 'frontend/coverage/sti-cct/lcov.info'
          flags: frontend
          fail_ci_if_error: true

  integration-tests:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: secret123!
          POSTGRES_DB: sticct_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres -d sticct_test" --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install backend dependencies
        run: |
          cd backend
          npm ci

      - name: Start backend in development mode
        run: |
          cd backend
          npm run start &
          echo "Backend started in development mode (no build required), waiting for it to be ready..."
          
          # Wait for backend to be ready (max 30 seconds)
          for i in {1..30}; do
            if curl -f http://localhost:3000/health > /dev/null 2>&1; then
              echo "Backend is ready!"
              break
            fi
            echo "Waiting for backend... ($i/30)"
            sleep 1
          done
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USERNAME: postgres
          DB_PASSWORD: secret123!
          DB_DATABASE: sticct_test

      - name: Install frontend dependencies
        run: |
          cd frontend
          if ! npm ci; then
            echo "npm ci failed, trying npm install to sync lock file"
            npm install
          fi

      - name: Build and serve frontend
        run: |
          cd frontend
          npm run build
          
          # Install http-server globally and start frontend
          npm install -g http-server
          http-server dist/sti-cct -p 4200 &
          
          # Wait for frontend to be ready (max 15 seconds)
          for i in {1..15}; do
            if curl -f http://localhost:4200 > /dev/null 2>&1; then
              echo "Frontend is ready!"
              break
            fi
            echo "Waiting for frontend... ($i/15)"
            sleep 1
          done

      - name: Run smoke tests
        run: |
          echo "🔍 Checking running processes..."
          ps aux | grep node || true
          
          echo "🔍 Checking ports..."
          netstat -tulpn | grep :3000 || true
          netstat -tulpn | grep :4200 || true
          
          echo "🔍 Testing backend health endpoint..."
          curl -v http://localhost:3000/health || echo "Backend health check failed"
          
          echo "🔍 Testing frontend..."
          curl -v http://localhost:4200 || echo "Frontend check failed"
          
          echo "✅ Smoke tests completed!"
